// tslint:disable
/**
 * nodesampleapp Swagger Docs
 * NodeJS Boilerplate
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface Error400Response
 */
export interface Error400Response {
    /**
     *
     * @type {string}
     * @memberof Error400Response
     */
    error_code: Error400ResponseErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof Error400Response
     */
    message: string;
    /**
     *
     * @type {Array<string | object>}
     * @memberof Error400Response
     */
    errors?: Array<string | object> | null;
}

/**
 * @export
 * @enum {string}
 */
export enum Error400ResponseErrorCodeEnum {
    APIVALIDATIONERROR = 'API_VALIDATION_ERROR',
    CREDITCARDDATAERROR = 'CREDIT_CARD_DATA_ERROR',
    INVALIDJSONFORMAT = 'INVALID_JSON_FORMAT'
}

/**
 *
 * @export
 * @interface Error403Response
 */
export interface Error403Response {
    /**
     *
     * @type {string}
     * @memberof Error403Response
     */
    error_code: Error403ResponseErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof Error403Response
     */
    message: string;
    /**
     *
     * @type {Array<string | object>}
     * @memberof Error403Response
     */
    errors?: Array<string | object> | null;
}

/**
 * @export
 * @enum {string}
 */
export enum Error403ResponseErrorCodeEnum {
    REQUESTFORBIDDENERROR = 'REQUEST_FORBIDDEN_ERROR'
}

/**
 *
 * @export
 * @interface Error404Response
 */
export interface Error404Response {
    /**
     *
     * @type {string}
     * @memberof Error404Response
     */
    error_code: Error404ResponseErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof Error404Response
     */
    message: string;
    /**
     *
     * @type {Array<string | object>}
     * @memberof Error404Response
     */
    errors?: Array<string | object> | null;
}

/**
 * @export
 * @enum {string}
 */
export enum Error404ResponseErrorCodeEnum {
    USERNOTFOUND = 'USER_NOT_FOUND',
    CREDITCARDCHARGENOTFOUNDERROR = 'CREDIT_CARD_CHARGE_NOT_FOUND_ERROR'
}

/**
 *
 * @export
 * @interface Error422Response
 */
export interface Error422Response {
    /**
     *
     * @type {string}
     * @memberof Error422Response
     */
    error_code: Error422ResponseErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof Error422Response
     */
    message: string;
    /**
     *
     * @type {Array<string | object>}
     * @memberof Error422Response
     */
    errors?: Array<string | object> | null;
}

/**
 * @export
 * @enum {string}
 */
export enum Error422ResponseErrorCodeEnum {
    GENERATECHECKOUTURLERROR = 'GENERATE_CHECKOUT_URL_ERROR',
    DUPLICATEPAYMENTERROR = 'DUPLICATE_PAYMENT_ERROR'
}

/**
 *
 * @export
 * @interface Error500Response
 */
export interface Error500Response {
    /**
     *
     * @type {string}
     * @memberof Error500Response
     */
    error_code: Error500ResponseErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof Error500Response
     */
    message: string;
    /**
     *
     * @type {Array<string | object>}
     * @memberof Error500Response
     */
    errors?: Array<string | object> | null;
}

/**
 * @export
 * @enum {string}
 */
export enum Error500ResponseErrorCodeEnum {
    INTERNALSERVERERROR = 'INTERNAL_SERVER_ERROR'
}

/**
 *
 * @export
 * @interface FeatureFlag
 */
export interface FeatureFlag {
    /**
     *
     * @type {string}
     * @memberof FeatureFlag
     */
    key: string;
    /**
     *
     * @type {boolean}
     * @memberof FeatureFlag
     */
    value: boolean;
}
/**
 *
 * @export
 * @interface Healthcheck
 */
export interface Healthcheck {
    /**
     *
     * @type {string}
     * @memberof Healthcheck
     */
    status: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {string | number | boolean | Array<object> | object}
     * @memberof InlineResponse200
     */
    raw: string | number | boolean | Array<object> | object | null;
    /**
     *
     * @type {number}
     * @memberof InlineResponse200
     */
    affected?: number;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2001
     */
    message?: string;
}
/**
 *
 * @export
 * @interface Root
 */
export interface Root {
    /**
     *
     * @type {string}
     * @memberof Root
     */
    message: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    firstName: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    lastName: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    address: string;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    isActive: boolean;
}
/**
 *
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     *
     * @type {string}
     * @memberof UserRequest
     */
    firstName: string;
    /**
     *
     * @type {string}
     * @memberof UserRequest
     */
    lastName: string;
    /**
     *
     * @type {string}
     * @memberof UserRequest
     */
    address: string;
    /**
     *
     * @type {boolean}
     * @memberof UserRequest
     */
    isActive: boolean;
}
/**
 *
 * @export
 * @interface UserUpdateRequest
 */
export interface UserUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof UserUpdateRequest
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UserUpdateRequest
     */
    lastName?: string;
    /**
     *
     * @type {string}
     * @memberof UserUpdateRequest
     */
    address?: string;
    /**
     *
     * @type {boolean}
     * @memberof UserUpdateRequest
     */
    isActive?: boolean;
}

/**
 * ErrorApi - axios parameter creator
 * @export
 */
export const ErrorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {'200' | '400' | '403' | '422' | '500'} error_code Error HTTP code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErrorExample(error_code: '200' | '400' | '403' | '422' | '500', options: any = {}): RequestArgs {
            // verify required parameter 'error_code' is not null or undefined
            if (error_code === null || error_code === undefined) {
                throw new RequiredError(
                    'error_code',
                    'Required parameter error_code was null or undefined when calling getErrorExample.'
                );
            }
            const localVarPath = `/error/{error_code}`.replace(
                `{${'error_code'}}`,
                encodeURIComponent(String(error_code))
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ErrorApi - functional programming interface
 * @export
 */
export const ErrorApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {'200' | '400' | '403' | '422' | '500'} error_code Error HTTP code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErrorExample(
            error_code: '200' | '400' | '403' | '422' | '500',
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
            const localVarAxiosArgs = ErrorApiAxiosParamCreator(configuration).getErrorExample(error_code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ErrorApi - factory interface
 * @export
 */
export const ErrorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {'200' | '400' | '403' | '422' | '500'} error_code Error HTTP code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErrorExample(error_code: '200' | '400' | '403' | '422' | '500', options?: any) {
            return ErrorApiFp(configuration).getErrorExample(error_code, options)(axios, basePath);
        }
    };
};

/**
 * ErrorApi - object-oriented interface
 * @export
 * @class ErrorApi
 * @extends {BaseAPI}
 */
export class ErrorApi extends BaseAPI {
    /**
     *
     * @param {'200' | '400' | '403' | '422' | '500'} error_code Error HTTP code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrorApi
     */
    public getErrorExample(error_code: '200' | '400' | '403' | '422' | '500', options?: any) {
        return ErrorApiFp(this.configuration).getErrorExample(error_code, options)(this.axios, this.basePath);
    }
}

/**
 * ExampleApi - axios parameter creator
 * @export
 */
export const ExampleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {'200' | '400' | '403' | '422' | '500'} error_code Error HTTP code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErrorExample(error_code: '200' | '400' | '403' | '422' | '500', options: any = {}): RequestArgs {
            // verify required parameter 'error_code' is not null or undefined
            if (error_code === null || error_code === undefined) {
                throw new RequiredError(
                    'error_code',
                    'Required parameter error_code was null or undefined when calling getErrorExample.'
                );
            }
            const localVarPath = `/error/{error_code}`.replace(
                `{${'error_code'}}`,
                encodeURIComponent(String(error_code))
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * ExampleApi - functional programming interface
 * @export
 */
export const ExampleApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {'200' | '400' | '403' | '422' | '500'} error_code Error HTTP code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErrorExample(
            error_code: '200' | '400' | '403' | '422' | '500',
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
            const localVarAxiosArgs = ExampleApiAxiosParamCreator(configuration).getErrorExample(error_code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * ExampleApi - factory interface
 * @export
 */
export const ExampleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {'200' | '400' | '403' | '422' | '500'} error_code Error HTTP code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErrorExample(error_code: '200' | '400' | '403' | '422' | '500', options?: any) {
            return ExampleApiFp(configuration).getErrorExample(error_code, options)(axios, basePath);
        }
    };
};

/**
 * ExampleApi - object-oriented interface
 * @export
 * @class ExampleApi
 * @extends {BaseAPI}
 */
export class ExampleApi extends BaseAPI {
    /**
     *
     * @param {'200' | '400' | '403' | '422' | '500'} error_code Error HTTP code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExampleApi
     */
    public getErrorExample(error_code: '200' | '400' | '403' | '422' | '500', options?: any) {
        return ExampleApiFp(this.configuration).getErrorExample(error_code, options)(this.axios, this.basePath);
    }
}

/**
 * FeatureFlagApi - axios parameter creator
 * @export
 */
export const FeatureFlagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureFlag(options: any = {}): RequestArgs {
            const localVarPath = `/api/feature-flag`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * FeatureFlagApi - functional programming interface
 * @export
 */
export const FeatureFlagApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureFlag(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureFlag> {
            const localVarAxiosArgs = FeatureFlagApiAxiosParamCreator(configuration).getFeatureFlag(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * FeatureFlagApi - factory interface
 * @export
 */
export const FeatureFlagApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureFlag(options?: any) {
            return FeatureFlagApiFp(configuration).getFeatureFlag(options)(axios, basePath);
        }
    };
};

/**
 * FeatureFlagApi - object-oriented interface
 * @export
 * @class FeatureFlagApi
 * @extends {BaseAPI}
 */
export class FeatureFlagApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagApi
     */
    public getFeatureFlag(options?: any) {
        return FeatureFlagApiFp(this.configuration).getFeatureFlag(options)(this.axios, this.basePath);
    }
}

/**
 * HealthcheckApi - axios parameter creator
 * @export
 */
export const HealthcheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveness(options: any = {}): RequestArgs {
            const localVarPath = `/healthcheck/liveness`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReadiness(options: any = {}): RequestArgs {
            const localVarPath = `/healthcheck/readiness`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * HealthcheckApi - functional programming interface
 * @export
 */
export const HealthcheckApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveness(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck> {
            const localVarAxiosArgs = HealthcheckApiAxiosParamCreator(configuration).getLiveness(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReadiness(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Healthcheck> {
            const localVarAxiosArgs = HealthcheckApiAxiosParamCreator(configuration).getReadiness(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * HealthcheckApi - factory interface
 * @export
 */
export const HealthcheckApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveness(options?: any) {
            return HealthcheckApiFp(configuration).getLiveness(options)(axios, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReadiness(options?: any) {
            return HealthcheckApiFp(configuration).getReadiness(options)(axios, basePath);
        }
    };
};

/**
 * HealthcheckApi - object-oriented interface
 * @export
 * @class HealthcheckApi
 * @extends {BaseAPI}
 */
export class HealthcheckApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthcheckApi
     */
    public getLiveness(options?: any) {
        return HealthcheckApiFp(this.configuration).getLiveness(options)(this.axios, this.basePath);
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthcheckApi
     */
    public getReadiness(options?: any) {
        return HealthcheckApiFp(this.configuration).getReadiness(options)(this.axios, this.basePath);
    }
}

/**
 * RootApi - axios parameter creator
 * @export
 */
export const RootApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoot(options: any = {}): RequestArgs {
            const localVarPath = `/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * RootApi - functional programming interface
 * @export
 */
export const RootApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoot(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Root> {
            const localVarAxiosArgs = RootApiAxiosParamCreator(configuration).getRoot(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * RootApi - factory interface
 * @export
 */
export const RootApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoot(options?: any) {
            return RootApiFp(configuration).getRoot(options)(axios, basePath);
        }
    };
};

/**
 * RootApi - object-oriented interface
 * @export
 * @class RootApi
 * @extends {BaseAPI}
 */
export class RootApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public getRoot(options?: any) {
        return RootApiFp(this.configuration).getRoot(options)(this.axios, this.basePath);
    }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} client_version The requester\&#39;s client version used to access this service
         * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
         * @param {string} service_name The requester\&#39;s service name
         * @param {UserRequest} UserRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(
            client_version: string,
            team_name: string,
            service_name: string,
            UserRequest: UserRequest,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'client_version' is not null or undefined
            if (client_version === null || client_version === undefined) {
                throw new RequiredError(
                    'client_version',
                    'Required parameter client_version was null or undefined when calling createUser.'
                );
            }
            // verify required parameter 'team_name' is not null or undefined
            if (team_name === null || team_name === undefined) {
                throw new RequiredError(
                    'team_name',
                    'Required parameter team_name was null or undefined when calling createUser.'
                );
            }
            // verify required parameter 'service_name' is not null or undefined
            if (service_name === null || service_name === undefined) {
                throw new RequiredError(
                    'service_name',
                    'Required parameter service_name was null or undefined when calling createUser.'
                );
            }
            // verify required parameter 'UserRequest' is not null or undefined
            if (UserRequest === null || UserRequest === undefined) {
                throw new RequiredError(
                    'UserRequest',
                    'Required parameter UserRequest was null or undefined when calling createUser.'
                );
            }
            const localVarPath = `/api/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (client_version !== undefined && client_version !== null) {
                localVarHeaderParameter['client-version'] = String(client_version);
            }

            if (team_name !== undefined && team_name !== null) {
                localVarHeaderParameter['team-name'] = String(team_name);
            }

            if (service_name !== undefined && service_name !== null) {
                localVarHeaderParameter['service-name'] = String(service_name);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof UserRequest !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(UserRequest !== undefined ? UserRequest : {})
                : UserRequest || '';

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} user_id User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(user_id: string, options: any = {}): RequestArgs {
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError(
                    'user_id',
                    'Required parameter user_id was null or undefined when calling deleteUser.'
                );
            }
            const localVarPath = `/api/users/{user_id}`.replace(`{${'user_id'}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} client_version The requester\&#39;s client version used to access this service
         * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
         * @param {string} service_name The requester\&#39;s service name
         * @param {string} user_id User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(
            client_version: string,
            team_name: string,
            service_name: string,
            user_id: string,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'client_version' is not null or undefined
            if (client_version === null || client_version === undefined) {
                throw new RequiredError(
                    'client_version',
                    'Required parameter client_version was null or undefined when calling getUser.'
                );
            }
            // verify required parameter 'team_name' is not null or undefined
            if (team_name === null || team_name === undefined) {
                throw new RequiredError(
                    'team_name',
                    'Required parameter team_name was null or undefined when calling getUser.'
                );
            }
            // verify required parameter 'service_name' is not null or undefined
            if (service_name === null || service_name === undefined) {
                throw new RequiredError(
                    'service_name',
                    'Required parameter service_name was null or undefined when calling getUser.'
                );
            }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError(
                    'user_id',
                    'Required parameter user_id was null or undefined when calling getUser.'
                );
            }
            const localVarPath = `/api/users/{user_id}`.replace(`{${'user_id'}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (client_version !== undefined && client_version !== null) {
                localVarHeaderParameter['client-version'] = String(client_version);
            }

            if (team_name !== undefined && team_name !== null) {
                localVarHeaderParameter['team-name'] = String(team_name);
            }

            if (service_name !== undefined && service_name !== null) {
                localVarHeaderParameter['service-name'] = String(service_name);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} client_version The requester\&#39;s client version used to access this service
         * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
         * @param {string} service_name The requester\&#39;s service name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(client_version: string, team_name: string, service_name: string, options: any = {}): RequestArgs {
            // verify required parameter 'client_version' is not null or undefined
            if (client_version === null || client_version === undefined) {
                throw new RequiredError(
                    'client_version',
                    'Required parameter client_version was null or undefined when calling getUsers.'
                );
            }
            // verify required parameter 'team_name' is not null or undefined
            if (team_name === null || team_name === undefined) {
                throw new RequiredError(
                    'team_name',
                    'Required parameter team_name was null or undefined when calling getUsers.'
                );
            }
            // verify required parameter 'service_name' is not null or undefined
            if (service_name === null || service_name === undefined) {
                throw new RequiredError(
                    'service_name',
                    'Required parameter service_name was null or undefined when calling getUsers.'
                );
            }
            const localVarPath = `/api/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (client_version !== undefined && client_version !== null) {
                localVarHeaderParameter['client-version'] = String(client_version);
            }

            if (team_name !== undefined && team_name !== null) {
                localVarHeaderParameter['team-name'] = String(team_name);
            }

            if (service_name !== undefined && service_name !== null) {
                localVarHeaderParameter['service-name'] = String(service_name);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },
        /**
         *
         * @param {string} client_version The requester\&#39;s client version used to access this service
         * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
         * @param {string} service_name The requester\&#39;s service name
         * @param {string} user_id User Id
         * @param {UserUpdateRequest} UserUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(
            client_version: string,
            team_name: string,
            service_name: string,
            user_id: string,
            UserUpdateRequest: UserUpdateRequest,
            options: any = {}
        ): RequestArgs {
            // verify required parameter 'client_version' is not null or undefined
            if (client_version === null || client_version === undefined) {
                throw new RequiredError(
                    'client_version',
                    'Required parameter client_version was null or undefined when calling updateUser.'
                );
            }
            // verify required parameter 'team_name' is not null or undefined
            if (team_name === null || team_name === undefined) {
                throw new RequiredError(
                    'team_name',
                    'Required parameter team_name was null or undefined when calling updateUser.'
                );
            }
            // verify required parameter 'service_name' is not null or undefined
            if (service_name === null || service_name === undefined) {
                throw new RequiredError(
                    'service_name',
                    'Required parameter service_name was null or undefined when calling updateUser.'
                );
            }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError(
                    'user_id',
                    'Required parameter user_id was null or undefined when calling updateUser.'
                );
            }
            // verify required parameter 'UserUpdateRequest' is not null or undefined
            if (UserUpdateRequest === null || UserUpdateRequest === undefined) {
                throw new RequiredError(
                    'UserUpdateRequest',
                    'Required parameter UserUpdateRequest was null or undefined when calling updateUser.'
                );
            }
            const localVarPath = `/api/users/{user_id}`.replace(`{${'user_id'}}`, encodeURIComponent(String(user_id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (client_version !== undefined && client_version !== null) {
                localVarHeaderParameter['client-version'] = String(client_version);
            }

            if (team_name !== undefined && team_name !== null) {
                localVarHeaderParameter['team-name'] = String(team_name);
            }

            if (service_name !== undefined && service_name !== null) {
                localVarHeaderParameter['service-name'] = String(service_name);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof UserUpdateRequest !== 'string' ||
                localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(UserUpdateRequest !== undefined ? UserUpdateRequest : {})
                : UserUpdateRequest || '';

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} client_version The requester\&#39;s client version used to access this service
         * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
         * @param {string} service_name The requester\&#39;s service name
         * @param {UserRequest} UserRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(
            client_version: string,
            team_name: string,
            service_name: string,
            UserRequest: UserRequest,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).createUser(
                client_version,
                team_name,
                service_name,
                UserRequest,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} user_id User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(
            user_id: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).deleteUser(user_id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} client_version The requester\&#39;s client version used to access this service
         * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
         * @param {string} service_name The requester\&#39;s service name
         * @param {string} user_id User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(
            client_version: string,
            team_name: string,
            service_name: string,
            user_id: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).getUser(
                client_version,
                team_name,
                service_name,
                user_id,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} client_version The requester\&#39;s client version used to access this service
         * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
         * @param {string} service_name The requester\&#39;s service name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(
            client_version: string,
            team_name: string,
            service_name: string,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).getUsers(
                client_version,
                team_name,
                service_name,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} client_version The requester\&#39;s client version used to access this service
         * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
         * @param {string} service_name The requester\&#39;s service name
         * @param {string} user_id User Id
         * @param {UserUpdateRequest} UserUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(
            client_version: string,
            team_name: string,
            service_name: string,
            user_id: string,
            UserUpdateRequest: UserUpdateRequest,
            options?: any
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).updateUser(
                client_version,
                team_name,
                service_name,
                user_id,
                UserUpdateRequest,
                options
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        }
    };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {string} client_version The requester\&#39;s client version used to access this service
         * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
         * @param {string} service_name The requester\&#39;s service name
         * @param {UserRequest} UserRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(
            client_version: string,
            team_name: string,
            service_name: string,
            UserRequest: UserRequest,
            options?: any
        ) {
            return UserApiFp(configuration).createUser(
                client_version,
                team_name,
                service_name,
                UserRequest,
                options
            )(axios, basePath);
        },
        /**
         *
         * @param {string} user_id User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(user_id: string, options?: any) {
            return UserApiFp(configuration).deleteUser(user_id, options)(axios, basePath);
        },
        /**
         *
         * @param {string} client_version The requester\&#39;s client version used to access this service
         * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
         * @param {string} service_name The requester\&#39;s service name
         * @param {string} user_id User Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(client_version: string, team_name: string, service_name: string, user_id: string, options?: any) {
            return UserApiFp(configuration).getUser(
                client_version,
                team_name,
                service_name,
                user_id,
                options
            )(axios, basePath);
        },
        /**
         *
         * @param {string} client_version The requester\&#39;s client version used to access this service
         * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
         * @param {string} service_name The requester\&#39;s service name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(client_version: string, team_name: string, service_name: string, options?: any) {
            return UserApiFp(configuration).getUsers(client_version, team_name, service_name, options)(axios, basePath);
        },
        /**
         *
         * @param {string} client_version The requester\&#39;s client version used to access this service
         * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
         * @param {string} service_name The requester\&#39;s service name
         * @param {string} user_id User Id
         * @param {UserUpdateRequest} UserUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(
            client_version: string,
            team_name: string,
            service_name: string,
            user_id: string,
            UserUpdateRequest: UserUpdateRequest,
            options?: any
        ) {
            return UserApiFp(configuration).updateUser(
                client_version,
                team_name,
                service_name,
                user_id,
                UserUpdateRequest,
                options
            )(axios, basePath);
        }
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     *
     * @param {string} client_version The requester\&#39;s client version used to access this service
     * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
     * @param {string} service_name The requester\&#39;s service name
     * @param {UserRequest} UserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUser(
        client_version: string,
        team_name: string,
        service_name: string,
        UserRequest: UserRequest,
        options?: any
    ) {
        return UserApiFp(this.configuration).createUser(
            client_version,
            team_name,
            service_name,
            UserRequest,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} user_id User Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUser(user_id: string, options?: any) {
        return UserApiFp(this.configuration).deleteUser(user_id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} client_version The requester\&#39;s client version used to access this service
     * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
     * @param {string} service_name The requester\&#39;s service name
     * @param {string} user_id User Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(client_version: string, team_name: string, service_name: string, user_id: string, options?: any) {
        return UserApiFp(this.configuration).getUser(
            client_version,
            team_name,
            service_name,
            user_id,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} client_version The requester\&#39;s client version used to access this service
     * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
     * @param {string} service_name The requester\&#39;s service name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsers(client_version: string, team_name: string, service_name: string, options?: any) {
        return UserApiFp(this.configuration).getUsers(
            client_version,
            team_name,
            service_name,
            options
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} client_version The requester\&#39;s client version used to access this service
     * @param {string} team_name The requester\&#39;s team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading&#x3D;h.msfrxiz473dv)
     * @param {string} service_name The requester\&#39;s service name
     * @param {string} user_id User Id
     * @param {UserUpdateRequest} UserUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUser(
        client_version: string,
        team_name: string,
        service_name: string,
        user_id: string,
        UserUpdateRequest: UserUpdateRequest,
        options?: any
    ) {
        return UserApiFp(this.configuration).updateUser(
            client_version,
            team_name,
            service_name,
            user_id,
            UserUpdateRequest,
            options
        )(this.axios, this.basePath);
    }
}
